generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Or your preferred database
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  password       String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  subscriptionType SubscriptionType @default(FREE)
  usageLimit     UsageLimit?
  accounts       Account[]
  sessions       Session[]
}

enum SubscriptionType {
  FREE
  PRO
  LIFETIME
}

model UsageLimit {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  visualizations  Int      @default(0)
  analyses        Int      @default(0)
  lastResetDate   DateTime @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Waitlist {
  id       String   @id @default(cuid())
  email    String   @unique
  joinedAt DateTime @default(now())
}
